<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>常见问题 on Engine GO</title>
    <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</link>
    <description>Recent content in 常见问题 on Engine GO</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 29 Oct 2018 00:10:14 +0800</lastBuildDate>
    
	<atom:link href="https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Python是如何运行的（未完成）</title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/python%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E8%A1%8C%E7%9A%84/</link>
      <pubDate>Mon, 29 Oct 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/python%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E8%A1%8C%E7%9A%84/</guid>
      <description> 这篇文章是从一个高层次的角度来分析 Python 语言的运行原理和流程，希望给从没接触过编程或者 Python 初学者初步的了解。果各位想了解更深层的实现原理，我推荐一些资源，[10 hours]()，[Python源码剖析]()。虽然一般把 Python 称为解析性语言，但是大部分的解释性语言为了优化速度都会增加编译过程，Python 语言有多种实现方式，最流行的是 CPython，也就是用 C 语言实现的，CPython 包含一个解释器和编译器。
编译过程 解析过程 运行过程 </description>
    </item>
    
    <item>
      <title>如何准备技术面试</title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/</link>
      <pubDate>Mon, 22 Oct 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/</guid>
      <description>作者：Windson Yang
本文章由ResumeJob贡献，ResumeJob能帮助你重新规划你的职业生涯，商业转载请联系作者获得授权，非商业转载请注明出处。
刚开始工作的时候，我对面试总是很恐惧，一方面怕简历无法通过筛选，另一方面因为面试的经验不多，往往也发挥得不好，一些常见套路也不知道怎么回答，也不想浪费时间去面试多几家公司。我当初并不知道对比其他求职者，自己的优势和劣势在哪里，也不知道如何去准备面试，面试官看重的是哪些方面，更不知道自己到底值多少钱。
现在回过头看，我觉得当初只是在欺骗自己，我担心的是即使自己认真准备简历和面试也对结果毫无影响，更不敢去想如果放弃这个 Offer，找不到其他工作怎么办。 我刚工作的时候是一份很普通的简历（专业不是计算机，作品也没多少）也得到一间大厂的面试机会，但是我反而很紧张，因为我根本没有做好准备。工作了几年之后，当我有了面试官的经历之后，我越来越发现认真准备简历和面试是很重要的，因为毫无准备，随便面试的求职者真的太多了。而且互联网公司招人实在困难，有计算机基础知识，有项目经验，愿意学习而且愿意来这家公司，靠的完全是缘分。所以只要求职者有一定的实力，愿意努力，市场上还是有非常多机会的。我把这几年作为面试者和面试官身份的的经验給大家，希望大家可以从中学到一些面试的技巧，找到心仪的工作。大家也可以使用ResumeJob进行简历Review和模拟面试，这样在真实面试的时候更有把握。
分析阶段 公司需要怎样的员工 我很喜欢 Google 前 CEO 施密特分享的一个故事，他刚到 Google 的时候，Google 还只是个小的创业公司。他以为 Google 和其他公司没什么两样，直到有一个周五，拉里佩奇在用谷歌搜索一些关键字的时候，他发现出现了一些不相干的广告推荐（这个情况我们现在在国内最大的搜索引擎也经常看到）。施密特以为接下来就是开几个会议，然后分到具体的工程师手上解决。但是拉里佩奇没有这么做，他用纸条写下&amp;rdquo;These Ads Suck!&amp;ldquo;，附上相关的截图贴在布告栏上就回家了。接下来的 72 小时彻底改变了施密特的认知。在周一凌晨 5点，有几位并不是负责广告业务的工程师发来一份邮件，从头到尾阐述了这个问题产生的原因，他们的解决方案，以及这个计划对公司有什么影响。这和我们强制的 996 加班解决不一样，他们从公司的角度去思考，自愿自发地用周末的时间去解决并不属于自己范畴的问题。 这样的员工我想就是每个公司都需要的：
 有技术能力，工作认真负责，可以及时解决问题，能给公司带来效益 出色的团队合作精神，能与团队一起成长 愿意自我学习，投资自己  所以求职者的简历与面试中必须能体现出这几点品质。举个例子，要在简历或者面试中展现自己喜欢学习计算机知识，与其笼统地说：
 热爱计算机，喜欢学习计算机系统的知识。
 可以改为：
 喜欢阅读计算机系统的书籍，完成《深入理解计算机系统》80% 以上的习题。并在博客（链接）分享学到的知识。
 面试官在筛选简历看到的时候就会自然地打开博客，进一步地了解求职者。另外，一些软技能，例如团队合作能力也是面试官非常注重的一点，面试过程中如果被问到有没有带领团队的经验，即使没有也可以这样回答：
 “我在以往的项目中与团队成员都能融洽相处，并且每个月都会做定期的技术分享互相学习，虽然没有带团队的机会，但是相信自己能够做到。”
 当然这些回答不可能一下子能想到，面试方面的技巧多练就好。重要的是定期找几家公司面试练练手，一方面能知道市场的行情，另一方面能跳出舒服区，找到其他更好工作机会，未雨绸缪对于一位工程师尤为重要。
员工需要怎样的公司 找新工作之前，求职者需要先认真思考下几个问题，一份工作中最看重的是哪些方面？
 薪酬 公司福利／工作环境 工作方向（假如你要从技术转向管理，这个岗位提供这样的可能吗？) 公司名气与规模 工程师文化 个人成长  有时候薪酬远不及公司名气与规模/工程师文化重要，有的公司能聚集一批优秀的工程师，那么只要认真待着一两年，进步速度远比其他地方快。有的厂则能提供大量隐性的福利（国内可以参考腾讯）。求职者需要真正地去思考自己想要去怎么样的公司，面试和找男女朋友一样，找你喜欢的，而不是找你能找到的。
了解自己的想法之后，求职者可以根据自己的着重点，筛选公司，修改简历，以及准备向面试官提问的问题。 提问这部分非常重要，我遇见很多求职者在面试中会感觉不好意思提问，一方面怕面试官会觉得自己有很多要求，另一方面根本没有想好要问什么。这点我觉得非常不明智，公司和员工就是互相选择的，一定要多提问题，了解公司的文化以及岗位的职责。才不至于刚入职就因为不适应而要离开。这点我们在面试阶段会介绍。
了解自己的优势 仔细分析自己的优势和劣势是什么，然后添加在简历中，优势可以从这几点入手，后面是面试官的理解：
优势
 大型项目的经验 （能解决项目普遍出现的问题，技术水平靠谱） 作为主要参与者得过比赛名次（聪明，勇于尝试） 毕业于不错的学校（学习努力，认真） 维护优秀的开源项目 (懂得团队协作，喜欢学习，愿意了解项目原理） 发表过论文或者优秀的博客文章（研究能力强，分析能力强） 数据结构和算法基础好，Leetcode 中等难度都能 bug free（基础不错，培养起来也简单）  了解到自己的优势和劣势，简历就可以强调自己的优势。例如，如果求职者要面试的是开发工程师，就应该突出项目经验以及对框架的熟悉程度，如果面试的是研究岗位，那么论文与文章的数量就比较重要。</description>
    </item>
    
    <item>
      <title>如何写一份更好的简历</title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E5%A6%82%E4%BD%95%E5%86%99%E4%B8%80%E4%BB%BD%E6%9B%B4%E5%A5%BD%E7%9A%84%E7%AE%80%E5%8E%86/</link>
      <pubDate>Mon, 18 Jun 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E5%A6%82%E4%BD%95%E5%86%99%E4%B8%80%E4%BB%BD%E6%9B%B4%E5%A5%BD%E7%9A%84%E7%AE%80%E5%8E%86/</guid>
      <description>作者：Windson Yang
本文章由 ResumeJob贡献，ResumeJob 能帮助你重新规划你的职业生涯，商业转载请联系作者获得授权，非商业转载请注明出处。
之前我写了一篇如何准备技术面试的文章，得到了不少读者的支持，也给了我更多动力把求职系列教程写下去。
面试前要准备的第一件事就是写简历，从零开始写简历是一件痛苦的事，因为它既重要又耗时。现在就有很多求职者在电脑前急躁不安地搜索简历模版和参考例句，却不知道如何下笔。写得太短的话 HR 一定觉得没诚意，写得太长的话又无从下手。有的求职者写完连自己都不忍心看，错别字连篇，排版混乱就投出去，所以海投简历也没有回应。而且程序员工资相对较高，有大量人才从其他专业转来，竞争非常激烈，所以如何从众多简历中脱颖而出，赢得面试的机会就非常重要了。这篇文章会从两个方面介绍简历的常见问题
 简历中的常见错误
 简历应该怎么写
  看完之后，读者就能从中学习到如何写一份能吸引住 HR 眼光的更好的简历。
简历中的常见错误 1. 信息过多，缺乏重点 常见表现是一开始十几行的技能列表
 熟悉使用Python，Go，熟悉C++，HTML，CSS, Vue, jQuery。
熟悉基本数据结构，算法设计能力。
熟悉 TCP/IP，UDP，HTTP，DNS，WebSocket 等网络协议。
&amp;hellip;
 我举一个血淋淋的真实例子：
 没错，这就是我收到的一份简历的开头，20行 的熟悉掌握。这位求职者开始就把自己了解的所有工具都列出来，希望通过长长的技能列表突显自己的经验和学习能力。但是却适得其反。因为 HR 只有在通过简介或者技能列表觉得求职者初步符合资格了，才会认真把简历看下去，其余情况都是快速搜索关键字。例如要招前端工程师，HR会先搜索 Vue，React，jQuery 等前端框架的关键字，如果看了5秒都没找到的话，就会看下一份。
其实不单单是 HR，大部分人遇到大段文字都会选择跳读，不信你回头看看，第3行 和 14行 其实是一样的。所以，越简洁清晰的简历，HR 反而越有可能认真看。还有另外一个问题，当扫到里面有几行是一些基础的技能的时候，HR 就会开始质疑求职者的能力。想象下，终于到周末休息了，你想找部轻松的电影看看，上网搜索到一个 20大 最佳喜剧电影榜单。当你快速浏览的时候，如果发现好几项都是烂片，一点都不好笑，完全浪费时间，这个情况下，你就会开始怀疑这个喜剧电影排行榜有问题，不会继续看下去，HR 看简历也是一样的。 那么技能列表应该这么写呢，因为 HR 可能是工程师，也可能是非技术员工，所以技能列表也应该简短而排版清晰，让外行人也能快速定位技能。我建议参考这种方式（因为熟练度见仁见智，所以不写也没什么关系）：
 后端框架：Django, Flask, Scrapy
前端框架：Vue, React, jQuery
数据库：Redis, MySQL
工具：Docker, Jenkins, Git
其他：HTTP, TCP/IP, WebSocket
外语：大学英语四级，能流畅阅读英文文档</description>
    </item>
    
    <item>
      <title>一文理解字符串编码</title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E4%B8%80%E6%96%87%E7%90%86%E8%A7%A3%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BC%96%E7%A0%81/</link>
      <pubDate>Fri, 11 May 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E4%B8%80%E6%96%87%E7%90%86%E8%A7%A3%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BC%96%E7%A0%81/</guid>
      <description>作者：Windson Yang (感谢Sylv对本文作出的贡献）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处（www.enginego.org）。
在打开网页或者文件的时候，你一定会遇过像这样的字符串乱码问题：
É��OÇ��，文件包括了各式各样的编码...  同时或多或少也遇到Unicode, UTF-8, ASCII, Latin-1这些编码术语。编码问题可以说是新人必踩坑，虽然从最后的解决方案来看，可能两三句代码就能解决，但是实际大部分开发者，包括我以前，也没有真正地理解它。原因并不是因为它复杂，而是它涉及了计算机科学中一个常见的问题，理论与工程实现的区别。理论上我们只需要按照A方案就可以解决问题，但是实际上，由于不同语言，不同系统的历史原因，实现的方案就变成多个，许多编程语言的编码实现都不同。所以要真正地理解字符串编码，首先需要了解计算机的一些基础知识，包括字符串如何存储在计算机硬盘中。如果只是希望靠运气来解决或者避开它，反而会在一次次盲目的尝试中浪费更多的时间。如果你不熟悉Python代码的话，完全可以跳过这篇文章所有的代码段，它不会影响你对这篇文章的影响。
 基础术语 计算机如何存储数据 ASCII编码 GBK编码 Unicode UTF-8编码 HTML实体编码 URL编码 常见问题 总结  基础术语  字符 字符串 键值表 字符串编码与解码  字符 A B C 天 气 エ ン コ 😁  上面的用空格分割的都是单个字符(Character)，它代表对人类能看懂的有意义的语言文字。
字符串 Hello 天气 Hola  字符串(Strings)就是多个字符组成的集合
键值表 一一对应的表，函数
y = x * 2  中每个x都对应着唯一的一个y值，x与y组成的集合就是键值表(Hash Table)，例如：
1 -&amp;gt; 2 2 -&amp;gt; 4 3 -&amp;gt; 6  这里的每一个x(1, 2, 3)都有对应的y(2, 4, 6)</description>
    </item>
    
    <item>
      <title>公私钥加密</title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E5%85%AC%E7%A7%81%E9%92%A5%E5%8A%A0%E5%AF%86/</link>
      <pubDate>Mon, 07 May 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E5%85%AC%E7%A7%81%E9%92%A5%E5%8A%A0%E5%AF%86/</guid>
      <description>作者：Windson Yang
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。（www.enginego.org）
 简介 对称密码 非对称密码 数字签名 SSH登录 Https传输 API调用  简介 我接触过不少工程师对于对称加密，非对称加密，公钥和私钥只停留在应用的层面，而并不了解背后的原理。所以在开发过程中犯了不少错误，而通常涉及加密传输或者加密存储的错误都比较严重，这篇文章着重介绍了密码学常用的工具以及常见场景。
对称密码 我们日常接触最多的就是对称密码，它最重要的性质有两点：
 对称密码中加密和解密使用的是同一个密码。 对称密码中加密后的密文只有该对称密码才能解密。  对称加密有很多名称，例如对称密码，私钥密码，它类似家里的保险柜，把密码设置成9527然后锁上，那么也需要使用9527才能打开。当你要把“芹菜，香菜”利用对称密码“000111”传输给朋友：
# 原文 芹菜，香菜 # 约定一个密钥（不能被第三方知道） 000111 # 把信息和对称密钥异或运算，得到密文 101100  这时候你可以直接把密文“101100”告诉你的朋友。你的朋友使用约定的密钥“000111”对密文进行再一次异或就能得到原文。实际使用中，加解密不止异或一次那么简单，通常会使用分组密码多次迭代异或。常用的对称加密算法有DES与AES。
    DES AES     密钥长度 56位 128, 192, 256 位   加密方式 对称分组密码 对称分组密码   加密轮数 16轮 128位10轮，192位12轮，256位14轮   安全性 被攻破 安全   速度 较慢 较快    密钥配送 对称密码最大的问题是密钥配送问题，也就是如何约定只有传输者和接受者都知道并且足够长的密钥“000111”，任何得到这个密钥的人都能够解密信息。常用的解决方法有两种：</description>
    </item>
    
    <item>
      <title>编程语言选择（未完成）</title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E9%80%89%E6%8B%A9/</link>
      <pubDate>Tue, 27 Feb 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E9%80%89%E6%8B%A9/</guid>
      <description> 作者：Windson Yang
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处 (www.enginego.org)。
刚开始学习编程的时候，我也很困惑这个问题，有那么那么多的编程语言，常见的有
 python ruby php Go c java R &amp;hellip;  我们可以根据你的职业职业规划来选择要学习的语言：
前端工程师  完成设计 后端交互  前端工程师主要的职责是把设计师的设计图实现，当设计师设计完界面之后
![design]()
完成设计 前端工程师需要用代码来实现设计图，例如界面的布局，按钮的颜色等等。这期间需要和设计师合作交流，讨论哪些方面在工程实现中可能会有困难，可能影响性能这类的因素。
后端交互 完成设计之后，前端工程师需要根据不同的页面以及业务逻辑来与后端交互，这句话什么意思呢？假如你开发的是一个让用户写日记的应用。那么当用户写完日记之后，点击保存按钮，这个按钮要触发一个保存日记的事件，需要把日记根据协议传输到服务器，然后存储在数据库里面。听起来有点复杂，其实非常简单，因为都有通用的工具帮助你完成。
后端工程师。  业务逻辑处理 前端交互  业务逻辑处理 前端交互 运维工程师 数据分析／机器学习工程师 </description>
    </item>
    
  </channel>
</rss>