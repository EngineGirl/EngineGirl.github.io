<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>目录 on Engine GO</title>
    <link>https://www.enginego.org/</link>
    <description>Recent content in 目录 on Engine GO</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 18 Jun 2018 00:10:14 +0800</lastBuildDate>
    
	<atom:link href="https://www.enginego.org/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>如何写一份更好的简历</title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E5%A6%82%E4%BD%95%E5%86%99%E4%B8%80%E4%BB%BD%E6%9B%B4%E5%A5%BD%E7%9A%84%E7%AE%80%E5%8E%86/</link>
      <pubDate>Mon, 18 Jun 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E5%A6%82%E4%BD%95%E5%86%99%E4%B8%80%E4%BB%BD%E6%9B%B4%E5%A5%BD%E7%9A%84%E7%AE%80%E5%8E%86/</guid>
      <description>作者：Windson Yang
本文章由ResumeJob贡献，ResumeJob能帮助你重新规划你的职业生涯，商业转载请联系作者获得授权，非商业转载请注明出处。
之前我写了一篇如何准备技术面试的文章，得到了不少读者的支持，也给了我更多动力把求职系列教程写下去，写简历是求职的第一步，重要性不言而喻。求职者要做好花上一天时间，多次修改的心理准备。非科班出身的求职者，更加要花大量时间在简历修改上，才能在简历库中脱颖而出。不过从零开始写简历是一件痛苦的事，因为它既重要又耗时，还考文字表达能力。有的求职者写完自己都不忍心看，错别字连篇就投出去了。这也就难怪HR更不重视，海投简历没有回复了。大部分求职者并没有面试官的经验，也没看过多少人的简历，所以无法从其他人的简历中学习。所以我准备了一些简历上能用到的，关于简介/工作经历/项目经验的[例句]()，大家可以参考它，并根据自己的实际情况修改。如果你写完不知道写得如何，也可以请求我们帮忙Review简历。
常见错误 首先我想说说简历上常见的几个错误，只要能保证简历没有这几个错误，就能比30%的简历更出色。
信息过多，缺乏重点 常见表现是一开始十几行的技能列表
 熟悉使用Python，Go，熟悉C++，HTML，CSS, Vue, jQuery。
熟悉基本数据结构，算法设计能力。
熟悉TCP/IP，UDP，HTTP，DNS，WebSocket等网络协议。
掌握服务器推送，Linux线程进程的基本原理和运行机制。
理解面向对象编程，了解MVC，MVVM等设计模式，对函数式编程有一定理解。
熟练掌握Django，Flask，Celery, Unicooo等框架与工具。
熟练运用SQLite, MySQL, Redis数据库、对象序列化、本地存储等数据存储方式。
熟练使用XML，Json数据解析，基本网络数据解析。
&amp;hellip;
 很多求职者一开始就把自己用过的所有工具都写上去，目的是突显自己的经验和学习能力。但是一开始列出十几行技能列表，反而会适得其反。HR平均阅读一份简历只有十多秒，在阅读这类大段文字的时候，HR只会快速扫描关键字，不会每一行都认真看，例如要招数据库工程师，HR会先快速搜索数据库相关的关键字，如果看了5秒都没找到的话，可能就会筛掉了。当扫到里面有几行是一些基础的技能的时候，会想是不是没东西写才把那么简单的技能都列出来。这就像当你看一个电影推荐排行榜，如果发现前几项都是很一般的电影，就会开始怀疑这个排行榜了。要注意，这里的HR可能是工程师，也可能是非技术员工，所以技能列表也应该简短而排版清晰，让外行人也能快速定位技能。技能列表可以参考这种方式（因为熟练度见仁见智，所以不写也没什么关系）：
 后端框架：Django, Flask
前端框架：jQuery, Vue, React
数据库：Redis, MySQL
工具：Docker, Jenkins, Git
平台：AWS, 腾讯云
外语：大学英语四级，能流畅阅读英文文档
 而且技能列表应该放在简介之后，HR是先通过简介了解求职者，再决定之后是否看下去的，一开始太长的技能列表会给HR很大的阅读压力。
无意义描述 第二个常见错误就是叙述项目经验的时候进行无意义的描述：
 XXX平台
根据项目任务要求完成规划工作和按时完成软件开发。
完成爬虫模块，展示模块。
开发后台管理系统，实现自定义分页，第三方登录。
完成数据整理与入库功能。
 HR无法从这样的描述中得到有效的信息，也无法判断求职者的技术能力。其实修改起来也很容易，根据发生什么事，你做了什么，结果怎么样三个点来修改，最好加上数据表现。
 XXX平台
构建IP代理池，使用Scrapy开发异步爬虫系统，优化爬虫策略和防屏蔽规则，提升200%网页抓取速度。
使用Vue框架完成后台管理系统，实现自定义分页，第三方登录等6个主要功能。
负责数据的清洗与存储到MySQL数据库，使用数据库索引减少50%数据查询时间。
 有的求职者会问，如果从来没有统计过数据怎么办？没关系，尝试发掘数据，如果没有统计过查询时间，可以从其他数据展示，例如CPU或者内存负载，最起码也可以像上面第二条一样说完成了多少个功能。而且可以从现在开始统计，养成先测量再优化的开发习惯。
排版杂乱，错别字多 这种出现得也很多，类似：
 熟悉iOS发布上架流程，真机调戏。
熟悉mysql数据库，了解MySQL基本原理（术语前后不符）
 还有的简历字体极小（因为内容太多，又要塞在两页中），行距小，难以阅读。都会给人不认真准备简历的感觉。我建议大家用Markdown写然后转成PDF，一方面能控制格式，另外一方面也能做版本控制。额外注意的是，有些招聘网站并不能完全正确渲染PDF文件。（例如拉勾网，遇到PDF翻页就会有大片空白出现。）写完简历之后一定要自己仔细检查，再请一位朋友看一遍，请求中肯的建议。
如何写一份更好的简历 好了，讲完常见错误，那么怎样的简历才是优秀的简历呢，首先要知道简历包含什么信息，很多人都只是凭感觉写。一份简历总体可以分为5个模块：
   基本信息 工作经历 项目经验 教育情况 其他     姓名 公司名称 项目名称 学校名称 兴趣爱好   邮箱 岗位 项目介绍 专业 志愿者工作   电话 主要职责 主要职责 就读年份    Github/博客 在职时间 项目时间 获奖情况    个人简介 项目经验      技能列表        顺序是基本信息，学校信息，个人简介，技能列表，接着才是剩下的模块，这个顺序能让HR快速了解求职者的优势与技能。学校信息如果是重点学校或者萌新工程师，可以放在基本信息之后，否则放在最后。网上有非常多的简历模版，不过大多是样式上面的，我们的例句模版提供了一些例句。求职者可以从里面选出符合自己实际情况的情况作为参考，比从头开始写要容易得多了。同时要注意，简介/工作经历/项目经验中的关键字应该加粗。</description>
    </item>
    
    <item>
      <title>编程的第一步（未完成）</title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E7%BC%96%E7%A8%8B%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AD%A5/</link>
      <pubDate>Fri, 01 Jun 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E7%BC%96%E7%A8%8B%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AD%A5/</guid>
      <description>我接触不少想学习计算机的朋友，它们常常被计算机那么多的范畴弄得头昏脑胀，先学编程语言呢，还是数据结构，先学建网站，写app，还是大数据，人工智能？我希望通过这篇文章让读者们有个初步的了解。在电子计算机还没有被发明的时候。计算机指的并不是我们现在常识中的电脑硬件，而是使用计算器计算的人（大多是女性，我猜因为女性比较细心，容易管理）。她们会被分配一些数据和需要计算的步骤，接着按照步骤耐心地操作计算器，然后写出结果。如果你看过电影《隐藏人物》应该会对一大堆女生拿着计算器埋头计算的场景有印象。不过，你不会把用计算器按下数字得到答案当作在编程，只会把它当成是使用工具的一种方式，但是实际上它与编程并没有太大的区别。举个例子，我们现在需要把一个文本文件的数据转换为Excel表格保存。文本的内容是：
 Shall I compare thee to a summer’s day?
Thou art more lovely and more temperate.
Rough winds do shake the darling buds of May,
 我们想把这些数据转换成Excel文件：
   A1 A2 A3     Shall I compare thee to a summer’s day? Thou art more lovely and more temperate. Rough winds do shake the darling buds of May,    与按计算器不一样的是，这里的数字变成了三行的文本，乘法法则变成了格式转换。得到的结果变成了Excel的文件。不过它们两者都遵循三个原则，接受数据，处理数据，输出数据，要解决这个问题就像按计算器一样简单：
 读取文本文件中的数据。 把文字按照Excel的格式需要转换成新的格式。 把新的数据存储起来。  即使不会编程，我们也可以猜测到读取数据与存储数据应该非常简单（如果没猜对的话我偷偷告诉你），难点应该在转换这一部分。我们分析下这部分要怎么解决，要存储为Excel格式的文件，我们可以先参考Excel是如何存储数据的。我们假设我们要得到的Excel表格是这样存储的：</description>
    </item>
    
    <item>
      <title>一文理解字符串编码</title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E4%B8%80%E6%96%87%E7%90%86%E8%A7%A3%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BC%96%E7%A0%81/</link>
      <pubDate>Fri, 11 May 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E4%B8%80%E6%96%87%E7%90%86%E8%A7%A3%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BC%96%E7%A0%81/</guid>
      <description>作者：Windson Yang (感谢Sylv对本文作出的贡献）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处（www.enginego.org）。
在打开网页或者文件的时候，你一定会遇过像这样的字符串乱码问题：
É��OÇ��，文件包括了各式各样的编码...  同时或多或少也遇到Unicode, UTF-8, ASCII, Latin-1这些编码术语。编码问题可以说是新人必踩坑，虽然从最后的解决方案来看，可能两三句代码就能解决，但是实际大部分开发者，包括我以前，也没有真正地理解它。原因并不是因为它复杂，而是它涉及了计算机科学中一个常见的问题，理论与工程实现的区别。理论上我们只需要按照A方案就可以解决问题，但是实际上，由于不同语言，不同系统的历史原因，实现的方案就变成多个，许多编程语言的编码实现都不同。所以要真正地理解字符串编码，首先需要了解计算机的一些基础知识，包括字符串如何存储在计算机硬盘中。如果只是希望靠运气来解决或者避开它，反而会在一次次盲目的尝试中浪费更多的时间。如果你不熟悉Python代码的话，完全可以跳过这篇文章所有的代码段，它不会影响你对这篇文章的影响。
 基础术语 计算机如何存储数据 ASCII编码 GBK编码 Unicode UTF-8编码 HTML实体编码 URL编码 常见问题 总结  基础术语  字符 字符串 键值表 字符串编码与解码  字符 A B C 天 气 エ ン コ 😁  上面的用空格分割的都是单个字符(Character)，它代表对人类能看懂的有意义的语言文字。
字符串 Hello 天气 Hola  字符串(Strings)就是多个字符组成的集合
键值表 一一对应的表，函数
y = x * 2  中每个x都对应着唯一的一个y值，x与y组成的集合就是键值表(Hash Table)，例如：
1 -&amp;gt; 2 2 -&amp;gt; 4 3 -&amp;gt; 6  这里的每一个x(1, 2, 3)都有对应的y(2, 4, 6)</description>
    </item>
    
    <item>
      <title>如何准备技术面试</title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/</link>
      <pubDate>Thu, 10 May 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/</guid>
      <description>作者：Windson Yang
本文章由ResumeJob贡献，ResumeJob能帮助你重新规划你的职业生涯，商业转载请联系作者获得授权，非商业转载请注明出处。
我刚开始工作的时候，对面试总是很恐惧，一方面怕简历无法通过筛选，另一方面怕现场发挥得不好，浪费自己和面试官的时间。我当初并不知道对比其他求职者，自己的优势和劣势在哪里，也不知道自己到底值多少钱。面试的时候都觉得面试官很严肃，问的问题我也都答不上，肯定没有机会入职，觉得自己烂透了，也不想浪费时间去面试多几家了。
现在回过头看，我觉得当初自己在欺骗自己，我真正担心的是即使自己认真准备简历和面试也对结果毫无影响，更不敢去想如果找不到工作没钱缴房租怎么办，索性海投简历碰运气。其实认真准备简历和面试是很有用的，因为毫无准备，随便面试的求职者真的太多了。 工作了几年之后，当我有了面试官的经历之后。我慢慢发现，公司招人实在困难，招的人要有计算机基础知识，有项目经验，愿意学习而且愿意来这家公司，靠的完全是缘分。所以只要你有一定的实力，愿意努力，现在的互联网行业还是买方市场，认真准备总是有收获的。我希望把这几年作为面试者和面试官身份的的经验給大家，也大家可以学到从中一些面试的技巧，找到心仪的工作。
 分析阶段 准备阶段 面试阶段 总结阶段  分析阶段  公司需要怎样的员工 员工需要怎样的公司 了解自己的优势  公司需要怎样的员工 先从公司的角度出发，如果你是部门的总监，你会希望什么样的员工？
我很喜欢Google前CEO施密特分享的一个故事，他刚到Google的时候，Google还只是个小的创业公司。他以为Google和其他公司没什么两样，直到有一个周五，拉里佩奇在用谷歌搜索一些关键字的时候，他发现出现了一些不相干的广告推荐（这个情况我们现在在国内最大的搜索引擎也经常看到）。施密特以为接下来就是开几个会议，然后分到具体的工程师手上解决。但是拉里佩奇没有这么做，他用纸条写下&amp;rdquo;These Ads Suck!&amp;ldquo;，附上相关的截图贴在布告栏上就回家了。接下来的72小时彻底改变了施密特的认知。在周一凌晨5点，有几位并不是负责广告业务的工程师发来一份邮件，从头到尾阐述了这个问题产生的原因，他们的解决方案，以及这个计划对公司有什么影响。这和我们强制的996加班不一样，他们从公司的角度去思考，自愿自发地用周末的时间去解决并不属于自己范畴的问题。 这样的员工我想就是每个公司都需要的：
 有技术，工作认真负责，可以及时解决问题，能给公司带来效益 出色的团队合作精神，能与团队一起成长 愿意自我学习，投资自己  所以求职者的简历，面试中必须能体现出这几点品质。举个例子，要展现自己喜欢学习计算机，与其说：
 热爱计算机，喜欢学习计算机系统的知识。
 可以修改为：
 喜欢阅读计算机系统的书籍，完成《深入理解计算机系统》80%以上的习题。并在博客分享学到的知识。
 团队合作能力也是面试官非常注重的一点，面试过程中如果被问到有没有带领团队的经验，如果你没有的话也不要直接回答没有，可以根据自己的情况回答：
 “我在以往的项目中与团队成员都能融洽相处，并且每个月都会做定期的技术分享互相学习，虽然没有带团队的机会，但是相信自己能够做好。”
 当然这些不是一下子能想到，面试技巧多练就好。定期找几家公司面试练练手，一方面能知道市场的行情，另一方面随时能找到其他更好工作机会，跳出现有的舒服区。
员工需要怎样的公司 找新工作之前，先认真思考下几个问题，一份工作中你最看重的是哪些方面？
 薪酬 公司福利／工作环境 工作方向（假如你要从技术转向管理，这个岗位提供这样的可能吗？) 公司发展前景 个人成长  了解自己的想法之后，再进行筛选公司以及准备如何提问。有时候薪酬的远不及公司文化重要，如果公司有好的工程师文化，能聚集一批优秀的工程师。那么只要认真待着一两年，进步速度要比其他地方快得多。你可以根据自己的着重点，筛选不同的公司，以及准备向面试官提问的问题。而且非常重要的一点是，也可以真正地去思考你到底喜不喜欢这家公司，面试和找男女朋友一样，找你喜欢的，而不是找你能找到的。 这点我们在面试阶段会介绍，提问这部分非常重要，我遇见很多求职者感觉不好意思提问，一方面怕面试官会觉得自己有很多要求，另一方面根本没有想好要问什么。这点我觉得非常不明智，公司和员工就是互相选择的，一定要多提问题，了解公司的文化以及岗位的职责。才不至于刚入职就因为不适应而要离开。如果求职者没有提问，面试官也会担心求职者入职后会不会不适应公司的某些规定，例如加班规定，着装要求。由于解雇一位员工比招聘要痛苦得多，面试官反而会不敢轻易录用他。
了解自己的优势 仔细分析自己的优势和劣势是什么，然后添加在简历中，优势可以从这几点入手，后面是面试官的理解：
优势
 大型项目的经验 （能解决项目普遍出现的问题，代码能力应该不会差） 作为主要参与者得过奖项（聪明，勇于尝试） 维护优秀的开源项目 (懂得团队协作，能写出优秀的代码） 发表过论文或者优秀的博客文章（研究能力强，分析能力强） 数据结构和算法基础好，Leetcode中等难度都能bug free（基础不错，培养起来也简单） 思维敏捷，聪明，有想法 （需要有文章，论文，得奖来证明） 毕业于不错的学校（学习努力）  与上面相反的就是劣势了。了解到自己的优势和劣势，简历就可以强调自己的优势，面试根据自己的劣势来准备。例如，如果你要面试的是一家公司的开发工程师，那么项目经验以及对框架的熟悉程度就比较重要，如果面试的是研究岗位，那么论文与文章的数量就比较重要。</description>
    </item>
    
    <item>
      <title>公私钥加密</title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E5%85%AC%E7%A7%81%E9%92%A5%E5%8A%A0%E5%AF%86/</link>
      <pubDate>Mon, 07 May 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E5%85%AC%E7%A7%81%E9%92%A5%E5%8A%A0%E5%AF%86/</guid>
      <description>作者：Windson Yang
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。（www.enginego.org）
 简介 对称密码 非对称密码 数字签名 SSH登录 Https传输 API调用  简介 我接触过不少工程师对于对称加密，非对称加密，公钥和私钥只停留在应用的层面，而并不了解背后的原理。所以在开发过程中犯了不少错误，而通常涉及加密传输或者加密存储的错误都比较严重，这篇文章着重介绍了密码学常用的工具以及常见场景。
对称密码 我们日常接触最多的就是对称密码，它最重要的性质有两点：
 对称密码中加密和解密使用的是同一个密码。 对称密码中加密后的密文只有该对称密码才能解密。  对称加密有很多名称，例如对称密码，私钥密码，它类似家里的保险柜，把密码设置成9527然后锁上，那么也需要使用9527才能打开。当你要把“芹菜，香菜”利用对称密码“000111”传输给朋友：
# 原文 芹菜，香菜 # 约定一个密钥（不能被第三方知道） 000111 # 把信息和对称密钥异或运算，得到密文 101100  这时候你可以直接把密文“101100”告诉你的朋友。你的朋友使用约定的密钥“000111”对密文进行再一次异或就能得到原文。实际使用中，加解密不止异或一次那么简单，通常会使用分组密码多次迭代异或。常用的对称加密算法有DES与AES。
    DES AES     密钥长度 56位 128, 192, 256 位   加密方式 对称分组密码 对称分组密码   加密轮数 16轮 128位10轮，192位12轮，256位14轮   安全性 被攻破 安全   速度 较慢 较快    密钥配送 对称密码最大的问题是密钥配送问题，也就是如何约定只有传输者和接受者都知道并且足够长的密钥“000111”，任何得到这个密钥的人都能够解密信息。常用的解决方法有两种：</description>
    </item>
    
    <item>
      <title>DNS查询</title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/dns%E6%9F%A5%E8%AF%A2/</link>
      <pubDate>Wed, 25 Apr 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/dns%E6%9F%A5%E8%AF%A2/</guid>
      <description> 作者：Windson Yang
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处（www.enginego.org）。
当你在浏览器输入www.apple.com。按下回车之后，浏览器跳到苹果的官网，把iPhoneX的介绍和图片显示出来。浏览器是如何通过www.apple.com这个域名找到iPhone的内容并且正确显示呢？第一步就要经过DNS查询。
 DNS查询 为什么要使用域名？ Q&amp;amp;A  DNS查询 DNS查询其实很好理解，生活上比较贴近的例子就是使用通讯录，我们通常能够记住自己的电话号码，不过要找其他人的电话，一般都需要通过通讯录。我们输入朋友的名字，通讯录就会找到对应的电话号码。在这里，通讯录担任了把难记的电话号码转成好记的人名的工作。DNS查询其实也一样。互联网刚开始发展的时候，联网的电脑加起来才几千台（没错～）。每台电脑都需要保存一个文件（称为hosts文件）用作记录域名对应哪个IP地址（就像通讯录记录人名对应哪个电话号码）。
www.enginego.org 104.24.120.11（每一行分别对应着域名和IP地址） www.apple.com 119.145.144.223 www.ieee.org 23.38.177.118  当我们在浏览器输入域名的时候，浏览器会先查询hosts文件，找到该域名对应的IP地址。然后再通过IP地址获取到服务器里面的内容，也就是iPhoneX的简介和图片。
为什么要使用域名？  容易记忆
计算机比较擅长处理数字，但是人类就差多了，访问苹果官网要背那么多数字显然不现实。使用域名就像我们使用手机的通讯录一样，我们会为常用的电话号码添加联系人姓名，打电话的时候直接输入名字就可以拨打，不需要背电话号码。
 容易扩展
早期的计算机和IP地址是一一对应的关系，但是一台计算机的性能并不能承受大量用户的请求。而一个域名可以背后可以对应多个IP地址。通过给不同地区的用户分配不同的IP地址，公司就能使用多台服务器来提供服务了。
  不过问题随着互联网的发展慢慢显现了，如果只是靠一个hosts文件会出现几个问题。
 每个小时都有新的域名被注册，新的主机加入互联网，主机数量太多了，现在已经超过10亿台设备接入互联网，如果每次查询的话都要从文件中找到对应的IP地址，那么速度会非常慢，hosts文件也会很大。 大部分的网站用户根本不会上，就像大部分联系人一样。每上线一个小网站就要求全球的电脑都进行更新这样显然小题大做了。  很可惜，这是治标不治本的方法。那么有什么方法可以解决这个问题呢？
现在DNS查询会经过3个步骤，一旦查询到结果，就会跳过剩下的步骤：
 先查询浏览器有没有保留缓存
如果你之前访问过这个网站，那么浏览器会网站保存对应的IP地址，这样就能减少查询IP地址的时间。
 查询本地的hosts文件
如果hosts文件有对应的内容，例如上面的
www.apple.com 119.145.144.223  那么计算机就会直接使用这个IP地址，你可以查看自己电脑的hosts文件，不同系统分别存储在不同的位置
Windows c:\windows\system32\drivers\etc\hosts macOS /etc/hosts  DNS服务器查询
当计算机在前两个方法都没有找到对应的IP地址，就会进行DNS服务器查询，它会发送一个UDP请求到最近的子域名服务器（默认是ISP运营商提供，在国内就是中国电信，中国联通，中国移动这几家），从它们中获取到IP地址。如果找不到的话就查询根域名服务器，子域名服务器会定时从根域名服务器中获取最新的内容域名和IP的对应关系。
  经过这三部，我们只需要记住某个网站的域名，就能获取到该网站的IP地址了。
Q&amp;amp;A  Q: 那么是不是破坏这13组根域名服务器就能破坏互联网的查询功能呢？例如让别人输入苹果的域名却跳到一个其他的网站呢？
A: 是的。但是很遗憾它分布在全世界各个地区，很难同时攻击它们 :D
 Q: 如果浏览器通过DNS查询到苹果的IP地址，那么我直接访问这个IP地址是不是就能访问到苹果的官网呢？
A: 很遗憾地说，在现在的互联网经过多层的设计以及代理，所以大部分情况下是不可以的。
  </description>
    </item>
    
    <item>
      <title>Ping命令</title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/ping%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Wed, 25 Apr 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/ping%E5%91%BD%E4%BB%A4/</guid>
      <description>作者：Windson Yang
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处 (www.enginego.org)。
 基础版 进阶版  基础版 ping命令 有时候当我们无法上网，会计算机的朋友会说，你ping一下网关，或者你ping一个网站看看。ping这个命令，其实是操作系统自带的命令之一，常用作在网络诊断中。你可以在终端中输入：
ping www.enginego.org  你可以把&amp;rdquo;www.enginego.org&amp;rdquo;替换成其他任意的域名，终端会显示：
PING www.enginego.org (104.24.120.11): 56 data bytes 64 bytes from 104.24.121.11: icmp_seq=0 ttl=54 time=170.383 ms 64 bytes from 104.24.121.11: icmp_seq=1 ttl=54 time=170.053 ms 64 bytes from 104.24.121.11: icmp_seq=2 ttl=54 time=171.298 ms 64 bytes from 104.24.121.11: icmp_seq=3 ttl=54 time=170.352 ms 64 bytes from 104.24.121.11: icmp_seq=4 ttl=54 time=170.636 ms ...  这表示从我的计算机发送64个字节的数据到104.24.121.11 (这个是经过DNS查询后的www.enginego.org的ip地址)，从发送到接受对方返回总共经过了170.xxx毫秒。代表www.enginego.org对应的那台服务器是开启并且响应ping指令的。
如果返回：
PING www.enginego.org (104.24.121.11): 56 data bytes Request timeout for icmp_seq 0 Request timeout for icmp_seq 1 Request timeout for icmp_seq 2 Request timeout for icmp_seq 3  这就代表连接超时，访问失败。原因有可能是本地计算机网络问题，也有可能是对应的服务器关闭或者不响应ping指令，或者你根本只是输错域名了。</description>
    </item>
    
    <item>
      <title>协议</title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Wed, 25 Apr 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E5%8D%8F%E8%AE%AE/</guid>
      <description>作者：Windson Yang
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处（www.enginego.org）。
 什么是协议 协议的优点 协议与API  什么是协议 计算机使用了多种多样的协议，大家接触得比较多的是HTTP, TCP/IP, FTP, ICMP等，计算机中的协议和我们现实生活中签的协议其实挺像，双方按照协议上的约定发送和解析数据。举个例子，你和你的朋友通过短信约定明天吃饭的时间地点：
 明天
中午12点
在公司等
 即使改变文字的顺序
 明天
在公司等吧，
中午12点
 一般人也能理解。不过计算机不一样，你可以把计算机当成患强迫症的朋友，它会要求你发的信息一定要符合一个规则：
 日期（两个字）
时间（四个字）
地点（四个字）
 那么信息必须按照这个规定发送：
 明天（日期）
上午9点（时间）
在公司等（地点）
 只要你和朋友都愿意遵守这个约定发送和接受信息，那么你们就互相遵守了协议。
协议的优点 无论对计算机或者人类来说，信息都变得有序和容易处理。当我们知道信息遵守协议A的时候，我们不需要阅读信息都知道前两个字是日期，接着是四个字的时间，最后是四个字的地点。
举个常见的例子，当你使用浏览器访问www.apple.com，浏览器其实是按照HTTP协议的约定向苹果服务器发出信息，协议要求内容：
第一行：请求方法和协议版本（8个字节） 第二行：请求的URL（30个字节） 第三行：缓存策略（30个字节） ...  实际发送的文字内容是：
GET / HTTP/1.1\r\n（请求方法和协议版本） Host: www.apple.com\r\n（请求的URL） Connection: keep-alive\r\n（缓存策略） Pragma: no-cache\r\n Cache-Control: no-cache\r\n Upgrade-Insecure-Requests: 1\r\n User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.</description>
    </item>
    
    <item>
      <title>路径</title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E8%B7%AF%E5%BE%84/</link>
      <pubDate>Wed, 25 Apr 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E8%B7%AF%E5%BE%84/</guid>
      <description>作者：Windson Yang
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处（www.enginego.org）。
 计算机文件存储 当前路径 绝对路径和相对路径 切换路径  计算机文件存储 计算机文件的存储结构如下：
/（根目录） │ └── usr ├── foo │ ├── first.md │ └── second.md ├── bar │ ├── sunkist.toml │ ├── cherry.toml  我们平时使用计算机，都会接触到文件夹以及目录，上图中，计算机中只有一个usr文件夹，usr 文件夹中又包含了foo和bar两个文件夹，分别包含两个文件。路径指的是文件／文件夹存放在计算机中的位置。要描述first.md这个文件的位置可以有两种方式，绝对路径和相对路径，其中绝对路径是
/usr/foo/first.md  每个文件／文件夹都只有一个绝对路径，无数个相对路径，如果你不理解的话，没关系，我们从头一步步开始介绍。
当前路径 我们平时用导航软件的时候，首先需要知道的是现在的位置，在计算机中也是一样，我们首先要知道自己在哪里，当你打开终端的时候：
(masOS) WindsondeMacBook-Air:fun/ windson$ (Windsons) C:fun\:  这里的&amp;rdquo;fun/&amp;ldquo;和&amp;rdquo;C:fun\&amp;ldquo;指当前执行命令的地方，也就是你的当前路径。可以通过命令来查看当前路径的绝对路径
(masOS) WindsondeMacBook-Air:foo/ windson$ pwd /usr/foo/ (Windsons) C:foo\: cd \usr\foo\  当你在终端中输入命令，默认命令针对的是当前路径。例如输入&amp;rdquo;ls&amp;rdquo;，计算机会理解成&amp;rdquo;ls /usr/foo/&amp;ldquo;(Windows下输入&amp;rdquo;dir&amp;rdquo;，理解为&amp;rdquo;dir \usr\foo\&amp;ldquo;)，两个命令都会列出当前路径下的所有文件名称。
绝对路径和相对路径 有一天，Cherry在路上遇到Sunkist，它问Sunkist的公司地址在哪里，Sunkist可能有两个答案：
 以这里为起点，西南方向500米的石室大厦 中国广东省广州市思哲路石室大厦  第一个答案以当前的位置为起点所描述的称为相对路径。根据Sunkist当前的位置不一样，它回答的相对路径会不一样，第二个答案从国家到省份城市巨细无遗地描述称为绝对路径，一个文件除非被移动，否则绝对路径是不会变化的。每个文件/文件夹在一台计算机中可能会有无数个相对路径，但是只有一个绝对路径。回到文章最初的文件存储结构，first.md的绝对路径是
/usr/foo/first.md (first.md的绝对路径)  这是从根目录&amp;rdquo;/&amp;ldquo;开始一层一层描述的位置。了解相对路径之前先有一点预备知识。在路径命令中&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>理解贝叶斯分类</title>
      <link>https://www.enginego.org/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%90%86%E8%A7%A3%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%88%86%E7%B1%BB/</link>
      <pubDate>Mon, 26 Mar 2018 00:19:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%90%86%E8%A7%A3%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%88%86%E7%B1%BB/</guid>
      <description>作者：Windson Yang
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处（www.enginego.org）。
贝叶斯模型在机器学习以及人工智能中都有出现，cherry分类器使用了朴素贝叶斯模型算法，经过简单的优化，使用1000个训练数据就能得到97.5%的准确率。虽然现在主流的框架都带有朴素贝叶斯模型算法，大多数开发者只需要直接调用api就能使用。但是在实际业务中，面对不同的数据集，必须了解算法的原理，实现以及懂得对结果进行分析，才能达到高准确率。
 cherry分类器 关键字过滤 贝叶斯模型 数学推导 贝叶斯模型实现 测试 统计分析 总结  cherry分类器 基础术语： cherry分类器默认支持中英文分类，用作例子的数据缓存中，中文训练数据包含正常，政治敏感，赌博，色情4个类别，英文训练数据包含正常邮件，垃圾邮件两个类别 (训练数据可以通过Google drive下载)。调用非常容易，使用pip安装后，输入句子：
 警方召开了全省集中打击赌博违法犯罪活动专项行动电视电话会议。会议的重点是“查处”六合彩、赌球赌马等赌博活动。
 &amp;gt;&amp;gt;&amp;gt; import cherry &amp;gt;&amp;gt;&amp;gt; result = cherry.classify(&#39;警方召开了全省集中打击赌博违法犯罪活动专项行动电 电话会议。会议的重点是“查处”六合彩、赌球赌马等赌博活动。&#39;) Building prefix dict from the default dictionary ... Loading model from cache /var/folders/md/0251yy51045d6nknpkbn6dc80000gn/T/jieba.cache Loading model cost 0.894 seconds. Prefix dict has been built succesfully.  分类器判断输入句子有99.7%的概率是正常句子，0.2%是政治敏感，剩余0.1%是其他两个类别
&amp;gt;&amp;gt;&amp;gt; result.percentage [(&#39;normal.dat&#39;, 0.997), (&#39;politics.dat&#39;, 0.002), (&#39;gamble.dat&#39;, 0.0), (&#39;sex.dat&#39;, 0.0)]  其中对分类器判断影响最大的词语分别是赌博，活动，会议，违法犯罪，警方，打击
&amp;gt;&amp;gt;&amp;gt; result.</description>
    </item>
    
    <item>
      <title>编程语言选择（未完成）</title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E9%80%89%E6%8B%A9/</link>
      <pubDate>Tue, 27 Feb 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E9%80%89%E6%8B%A9/</guid>
      <description> 作者：Windson Yang
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处 (www.enginego.org)。
刚开始学习编程的时候，我也很困惑这个问题，有那么那么多的编程语言，常见的有
 python ruby php Go c java R &amp;hellip;  我们可以根据你的职业职业规划来选择要学习的语言：
前端工程师  完成设计 后端交互  前端工程师主要的职责是把设计师的设计图实现，当设计师设计完界面之后
![design]()
完成设计 前端工程师需要用代码来实现设计图，例如界面的布局，按钮的颜色等等。这期间需要和设计师合作交流，讨论哪些方面在工程实现中可能会有困难，可能影响性能这类的因素。
后端交互 完成设计之后，前端工程师需要根据不同的页面以及业务逻辑来与后端交互，这句话什么意思呢？假如你开发的是一个让用户写日记的应用。那么当用户写完日记之后，点击保存按钮，这个按钮要触发一个保存日记的事件，需要把日记根据协议传输到服务器，然后存储在数据库里面。听起来有点复杂，其实非常简单，因为都有通用的工具帮助你完成。
后端工程师。  业务逻辑处理 前端交互  业务逻辑处理 前端交互 运维工程师 数据分析／机器学习工程师 </description>
    </item>
    
    <item>
      <title>Windows安装Docker教程</title>
      <link>https://www.enginego.org/%E5%B7%A5%E5%85%B7/docker/windows%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85docker%E6%95%99%E7%A8%8B/</link>
      <pubDate>Mon, 08 Jan 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E5%B7%A5%E5%85%B7/docker/windows%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85docker%E6%95%99%E7%A8%8B/</guid>
      <description>作者：Windson Yang 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
Windows安装Docker教程 官方英文教程
安装前须知 你的系统需满足以下几个条件，如果不满足以下要求，请参考第二节
 确保你电脑安装了64位的Windows 10 Pro, Enterprise或者Education(1511 November update, Build 10586 or later)版本。
 如果你的电脑安装了VirtualBox（一个虚拟机软件，默认系统没有安装）请注意，Windows的Docker版本因为需要Microsoft Hyper-V来运作，安装之后会令VirtualBox无效。
 必须启动虚拟化（默认启动），可以在任务管理中找到这一项确保enabled
Windows8检查
点击开始 &amp;gt; 任务管理 &amp;gt; 性能 &amp;gt; CPU
黄色的Virtualization为Enabled即可
Windows7检查
运行Microsoft® Hardware-Assisted Virtualization Detection Tool工具，然后按照步骤来检测。
   Docker建立的容器和镜像会被计算机上面的所有用户共享，多账号的系统中要注意数据安全问题。
 开始安装  下载Docker稳定版 双击下载文件夹中的InstallDocker.msi文件。 阅读协议内容觉得没问题之后点击接受协议（不接受将无法安装:O)，然后安装。   一般软件应该安装在非系统盘（C盘）中，这样即使以后需要重装系统，软件也不会丢失。安装路径不要包含中文）
  输入系统管理员密码使Docker可以安装网络组件。 完成  启动Docker 安装完成后Docker会自动启动，你可以从状态栏看到Docker正在运作 验证安装成功 运行终端(cmd.exe或者PowerShell)
PS C:\Users\Docker&amp;gt; docker --version Docker version 17.03.0-ce, build 60ccb22  看到Docker version提示的字样代表安装成功了</description>
    </item>
    
    <item>
      <title>macOS系统安装docker教程</title>
      <link>https://www.enginego.org/%E5%B7%A5%E5%85%B7/docker/macos%E5%AE%89%E8%A3%85docker%E6%95%99%E7%A8%8B/</link>
      <pubDate>Mon, 08 Jan 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E5%B7%A5%E5%85%B7/docker/macos%E5%AE%89%E8%A3%85docker%E6%95%99%E7%A8%8B/</guid>
      <description>作者：Windson Yang 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
(官方英文教程)[https://docs.docker.com/toolbox/toolbox_install_mac/]
 系统必须满足以下全部要求：  2010后的苹果电脑，支持英特尔MMU内存虚拟 10.10.3或者更新的苹果系统 从Docker1.13版本（准备推出）之后不再支持10.10版本（OS X 10.10 Yosemite） 不能安装4.3.30版本之前的VirtualBox（默认系统并没有这个软件）    下载软件Docker for macOS 双击Docker.dmg安装
 双击应用程序中的Docker.app来启动Docker
 系统会请求你输入密码来启动Docker，Docker需要特殊权限来安装网络组件
 然后可以在屏幕右上角看到Docker的标志
 可以点击这个标志浏览设置
 如此简单就安装成功啦，可以吃点巧克力奖励下自己了。:D
  </description>
    </item>
    
    <item>
      <title>域名</title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E5%9F%9F%E5%90%8D/</link>
      <pubDate>Mon, 08 Jan 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E5%9F%9F%E5%90%8D/</guid>
      <description>作者：Windson Yang
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处（www.enginego.org）。
计算机知识往往互相关联，要真正了解域名是什么，必须先了解什么是URI。这里有一些常见的例子。
https://www.apple.com http://www.w3c.org ftp://example.org/resource.txt file:///Users/example/hello.jpg  最后两个大家可能不太熟悉，以最后一个为例子，你们可以尝试把自己电脑中任意的文件拖放到浏览器中，浏览器会去猜这个文件类型，一些常见的文件类型例如图片，浏览器可以判断并渲染出来。同时浏览器的地址栏也会变成file开头。这个例子中的file就是这个URI所使用的协议。常见的协议还有
HTTP 超文本传输协议 SMTP 邮件协议 telnet 终端传输协议 DNS 域名系统协议 DHCP 动态主机配置协议  好吧，我承认部分对于一般大众不是很常见，不过如果你想认真学习编程，起码看到这些名词的时候知道是什么。感兴趣的学生可以前往Lists of network protocols。那么协议又是什么呢？其实协议的本质非常简单。
域名（Domain names）是互联网基础架构的关键部分。它们为互联网上任何可用的网页服务器提供了人类可读的地址。 任何连上互联网的电脑都可以通过一个公共IP地址访问到，对于IPv4来说，这个地址由32位组成（它们通常写成四个范围在0~255以内，由点分隔的数字组成，比如173.194.121.32），而对于IPv6来说，这个地址由128位组成，通常写成八组由冒号分隔的四进制数(e.g., 2027:0da8:8b73:0000:0000:8a2e:0370:1337).  </description>
    </item>
    
    <item>
      <title>服务端</title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E6%9C%8D%E5%8A%A1%E7%AB%AF/</link>
      <pubDate>Mon, 08 Jan 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E6%9C%8D%E5%8A%A1%E7%AB%AF/</guid>
      <description> 作者：Windson Yang
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
服务端 很简单，服务器就是一台**24小时运行**，运行着**专为服务器设计的系统**的**高性能计算机**。它也是由内存，硬盘，CPU组成。不过它会根据这台服务器的用途来配置不同的组件。有些服务器专门用来存储文件，图片，那么它就需要更大的硬盘，对CPU的要求就没那么高。有些专门用来进行高密度的计算，例如视频转格式，数据分析那么就要更快的CPU。 服务器会根据不同客户端的请求返回不同的内容，当你使用浏览器访问一个页面的时候，实际上浏览器就是寻找该页面对应的服务器获取相应的图片和文字内容。  客户端 常见的客户端包括浏览器，手机，它请求服务器需要的资源，然后客户端解析返回的内容并且显示给用户。  </description>
    </item>
    
    <item>
      <title>终端</title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E7%BB%88%E7%AB%AF/</link>
      <pubDate>Mon, 08 Jan 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E7%BB%88%E7%AB%AF/</guid>
      <description>作者：Windson Yang
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处 (www.enginego.org)。
使用终端是我们开始编程的第一步，无论是运行程序，或者了解计算机的基本信息都需要用到。让我们愉快地和它玩耍把。
基础版  什么是终端 为什么要用终端  什么是终端  图形界面 命令行界面 亲自试试吧  图形界面 我们平时习惯了使用图形界面，当我们双击图标打开文件，计算机会先通过后续去猜测用什么程序运行文件，如果是图片（.jpg, .png）的话，计算机就会用图片浏览器打开，如果是可执行文件（macOS下的dmg后缀文件，Windows下的exe后缀文件），计算机会先找到该应用的在硬盘中的位置，然后根据可执行文件里面包含的信息（需要加载什么资源）来运行程序。
命令行界面 在计算机刚开始发展的时候，并没有那么容易上手的操作界面，大家都是通过一个黑乎乎的程序输入命令，然后等待计算机执行。
这时候运行程序或者打开文件，则需要使用不同的命令。例如打开当前路径下一个名为normal.txt的文本文件，可以用cat命令：
cat normal.txt  要打开图片的话，需要安装额外的软件来打开。要运行一个名为hello.py的python程序，在安装了python软件之后，在终端直接输入
python hello.py  回车之后就可以看到程序的输出结果了。其实图形界面与命令行界面运行的本质是一样的，运行程序或者打开文件：
 安装对应的软件 指定程序运行（图形界面会根据后缀名帮你选择用什么程序来打开。）  亲自试试吧 你可以尝试先打开自己计算机的终端：
 macOS: 同时按住&amp;rdquo;control&amp;rdquo;+&amp;ldquo;space&amp;rdquo;键，在搜索框输入termianl，&amp;rdquo;回车&amp;rdquo;
Windows 7：打开&amp;rdquo;开始&amp;rdquo;菜单，在搜索框里输入cmd，&amp;rdquo;回车&amp;rdquo;
Windows 8+：同时按住&amp;rdquo;win&amp;rdquo;+&amp;ldquo;Q&amp;rdquo;键，然后在弹出的搜索框里输入cmd，&amp;rdquo;回车&amp;rdquo;
 成功打开之后，光标会停留在某一行。类似：
WindsondeMacBook-Air:~ windson$ |  因为和计算机交互需要遵守一定的指令规则，终端默认会运行一个程序，常见的是Bash（Bourne Again SHell）或者sh，你可以尝试输入一个命令，然后让终端执行。
 macOS: &amp;ldquo;ls&amp;rdquo;+&amp;ldquo;回车&amp;rdquo;
Windows: &amp;ldquo;dir&amp;rdquo;+&amp;ldquo;回车&amp;rdquo;
 输入回车之后，你会发现终端显示出了一些文字，仔细观察的话你会发现其实是你电脑中某个目录下的文件。ls/dir这个命令就是列出当前目录的文件。 当然这个命令还有很多参数，也就是你可以告诉计算机显示什么文件（隐藏／非隐藏），显示文件的详细内容（创建日期，大小），ls/dir只会调用一个常用的默认配置，假如你想把隐藏文件也显示的话，在终端输入
 macOS: &amp;ldquo;ls -a&amp;rdquo;+&amp;ldquo;回车&amp;rdquo;
Windows: &amp;ldquo;dir -a&amp;rdquo;+&amp;ldquo;回车&amp;rdquo;
 终端还有很多其他命令，例如输出当前路径</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/hook/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/hook/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E5%86%85%E5%AD%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E5%86%85%E5%AD%98/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E5%A0%86%E6%A0%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E5%A0%86%E6%A0%88/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E5%B5%8C%E5%A5%97%E5%AD%97/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E5%B5%8C%E5%A5%97%E5%AD%97/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E6%8A%93%E5%8C%85/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E6%8A%93%E5%8C%85/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E8%BF%9B%E7%A8%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E8%BF%9B%E7%A8%8B/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>