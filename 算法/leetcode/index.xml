<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Leetcode 算法 on Engine GO</title>
    <link>https://www.enginego.org/%E7%AE%97%E6%B3%95/leetcode/</link>
    <description>Recent content in Leetcode 算法 on Engine GO</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Jul 2019 00:10:14 +0800</lastBuildDate>
    
	<atom:link href="https://www.enginego.org/%E7%AE%97%E6%B3%95/leetcode/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DFS 解题模式</title>
      <link>https://www.enginego.org/%E7%AE%97%E6%B3%95/leetcode/dfs-%E8%A7%A3%E9%A2%98%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 01 Jul 2019 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E7%AE%97%E6%B3%95/leetcode/dfs-%E8%A7%A3%E9%A2%98%E6%A8%A1%E5%BC%8F/</guid>
      <description>概述 这篇文章介绍如何解决 Leetcode 常见的 DFS 问题的模式，了解这个基本模式之后，相信面对大部分 DFS 问题（如果 hard 难度的需要一些变形）都能够迎刃而解。阅读之前希望你对图的基础知识有一定的了解，例如什么是图，常见的图有那些，如何遍历图，Leetcode 上 DFS 问题常见的都是无环图，所以我们这里也只讨论无环图的解法。
辨别问题 那么什么样的问题可以用 DFS 来解决呢？在 Leetcode 中，DFS 问题常见的表达形式为：
 “给定一个图（树，字符串，矩阵），找到在遍历图的过程中，符合特定条件的数值或路径。”
 （这里我把返回布尔值当成返回默认值或空路径的特殊情况），上面的这个定义有点抽象，举两个例子：
 Leetcode 113 Path Sum II
 &amp;ldquo;Given a binary tree and a sum, find all root-to-leaf paths where each path&amp;rsquo;s sum equals the given sum.&amp;rdquo;
“给定一个有向无环图（非空二叉树），找到在遍历图的过程中，符合特定条件的数值（路径和等于 sum ）”
 Given the below binary tree and sum = 22, input: 5 / \ 4 8 / / \ 11 13 4 / \ / \ 7 2 5 1 output: [ [5,4,11,2], [5,8,4,5] ]  Leetcode 200 Number of Islands</description>
    </item>
    
  </channel>
</rss>